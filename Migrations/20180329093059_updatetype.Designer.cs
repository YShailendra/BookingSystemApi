// <auto-generated />
using BookingSystemApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BookingSystemApi.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20180329093059_updatetype")]
    partial class updatetype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingSystemApi.Models.BookingModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AmountPaid");

                    b.Property<string>("BookingNumber")
                        .IsRequired();

                    b.Property<Guid?>("BusID");

                    b.Property<int?>("CancelationCharge");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Destination")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("JourneyDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNo")
                        .IsRequired();

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<int>("TotalAmount");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BookingSystemApi.Models.BusDetailModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusDescription");

                    b.Property<string>("BusNo")
                        .IsRequired();

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("SeatingSeats");

                    b.Property<int>("SleeperSeatsLB");

                    b.Property<int>("SleeperSeatsUB");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("BusDetail");
                });

            modelBuilder.Entity("BookingSystemApi.Models.BusRouteModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BusID");

                    b.Property<int>("RouteID");

                    b.HasKey("ID");

                    b.HasIndex("BusID");

                    b.HasIndex("RouteID");

                    b.ToTable("BusRoute");
                });

            modelBuilder.Entity("BookingSystemApi.Models.RouteModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RouteName");

                    b.HasKey("ID");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("BookingSystemApi.Models.RouteStationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Price");

                    b.Property<int>("RouteID");

                    b.Property<int>("Sequence");

                    b.Property<int>("StationID");

                    b.HasKey("ID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StationID");

                    b.ToTable("RouteStation");
                });

            modelBuilder.Entity("BookingSystemApi.Models.SeatDetails", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<Guid?>("BookingID");

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("SeatId");

                    b.Property<string>("SeatType")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BookingID");

                    b.ToTable("SeatDetails");
                });

            modelBuilder.Entity("BookingSystemApi.Models.StationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StationName");

                    b.HasKey("ID");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("BookingSystemApi.Models.UserModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Addr");

                    b.Property<string>("City");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool?>("IsAdmin");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNo")
                        .IsRequired();

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNo")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("BookingSystemApi.Models.BusRouteModel", b =>
                {
                    b.HasOne("BookingSystemApi.Models.BusDetailModel", "BusDetail")
                        .WithMany()
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookingSystemApi.Models.RouteModel", "RouteModel")
                        .WithMany()
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookingSystemApi.Models.RouteStationModel", b =>
                {
                    b.HasOne("BookingSystemApi.Models.RouteModel", "RouteModel")
                        .WithMany()
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookingSystemApi.Models.StationModel", "StationModel")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookingSystemApi.Models.SeatDetails", b =>
                {
                    b.HasOne("BookingSystemApi.Models.BookingModel", "Booking")
                        .WithMany("BookedSeatDetails")
                        .HasForeignKey("BookingID");
                });
#pragma warning restore 612, 618
        }
    }
}
